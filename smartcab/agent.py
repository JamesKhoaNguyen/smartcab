import random
import math
from environment import Agent, Environment
from planner import RoutePlanner
from simulator import Simulator

#In the agent.py Python file, choose three flags that can be set and explain how they change the simulation.
class LearningAgent(Agent):
    """ An agent that learns to drive in the Smartcab world.
        This is the object you will be modifying. """

    def __init__(self, env, learning=False, epsilon=1.0, alpha=0.5):
        super(LearningAgent, self).__init__(env)     # Set the agent in the evironment
        self.planner = RoutePlanner(self.env, self)  # Create a route planner
        self.valid_actions = self.env.valid_actions  # The set of valid actions
        self.trial_number_global = 0 #keeps track of the number of trials so far
        # Set parameters of the learning agent
        self.learning = learning # Whether the agent is expected to learn
        self.Q = dict()          # Create a Q-table which will be a dictionary of s
        self.epsilon = epsilon   # Random exploration factor
        self.alpha = alpha       # Learning factor
        self.testing = None      # Trial/Test Period Tracker (added by James Nguyen)
        self.q_values = []       # q-values list which contains actions:reward pairs for a specific state (added by James Nguyen)
        ###########
        ## TO DO ##
        ###########
        # Set any additional class parameters as needed


    def reset(self, destination=None, testing=False):
        """ The reset function is called at the beginning of each trial.
            'testing' is set to True if testing trials are being used
            once training trials have completed. """
        #this global variable was added in to have a accessible counter for
        #number of trials
        self.trial_number_global += 1
        # Select the destination as the new location to route to
        self.planner.route_to(destination)

        ###########
        ## TO DO ##
        ###########
        # Update epsilon using a decay function of your choice
        # Update additional class parameters as needed
        # If 'testing' is True, set epsilon and alpha to 0
        if testing == False:
            """Non-optimized learning case"""
            #self.epsilon = self.epsilon - 0.05
            """Optimized learning case"""
            self.epsilon = math.pow(0.999, self.trial_number_global)

        if testing == True:
            self.epsilon = 0
            self.alpha = 0
            self.testing == True
        else:
            self.testing == False
        """ ------------ epsilon code portion ----------"""

        return None

    def build_state(self):
        """ The build_state function is called when the agent requests data from the
            environment. The next waypoint, the intersection inputs, and the deadline
            are all features available to the agent. """

        # Collect data about the environment
        waypoint = self.planner.next_waypoint() # The next waypoint
        inputs = self.env.sense(self)           # Visual input - intersection light and traffic
        inputs = tuple([(v,k) for v,k in inputs.iteritems()])
        deadline = self.env.get_deadline(self)  # Remaining deadline

        ###########
        ## TO DO ##
        ###########
        # Set 'state' as a  of relevant data for the agent
        state = tuple([waypoint,inputs])

        return state


    def get_maxQ(self, state):
        """ The get_max_Q function is called when the agent is asked to find the
            maximum Q-value of all actions based on the 'state' the smartcab is in. """
        ###########
        ## TO DO ##
        ###########
        # Calculate the maximum Q-value of all actions for a given state

        self.q_values = [self.Q[state][action] for action in self.valid_actions]
        maxQ = max(self.q_values)

        return maxQ


    def createQ(self, state):
        """ The createQ function is called when a state is generated by the agent. """

        ###########
        ## TO DO ##
        ###########
        # When learning, check if the 'state' is not in the Q-table
        # If it is not, create a new dictionary for that state
        #   Then, for each action available, set the initial Q-value to 0.0
        action_reward_dict = {}
        if self.learning == True:
            if state not in self.Q:
                for action in self.valid_actions:
                    action_reward_dict[action] = 0.0
                self.Q[state] = action_reward_dict

        return


    def choose_action(self, state):
        """ The choose_action function is called when the agent is asked to choose
            which action to take, based on the 'state' the smartcab is in. """

        # Set the agent state and default action
        self.state = state
        self.next_waypoint = self.planner.next_waypoint()

        ###########
        ## TO DO ##
        ###########
        # When not learning, choose a random action (problem 3 default no learning)
        # When learning, choose a random action with 'epsilon' probability (Trial period for q-learning)
        # Otherwise, choose an action with the highest Q-value for the current state (testing period for q-learning)
        """ Q-learning turned off """
        if self.learning == False:
            action = random.choice(Environment.valid_actions)
        """ Q-learning turned on """
        if self.learning == True:
            if random.random() < self.epsilon:
                #random actions of epsilon probability can happen only in training trials
                action = random.choice(Environment.valid_actions)
            else:
                #non-random actions based on Q-value can happen in both training and testing trials
                maxQ = self.get_maxQ(state)
                if self.q_values.count(maxQ) > 1:
                    #This is to randomize the action in the case of multiple actions with the same Q-values
                    maxQ_index = random.choice([i for i in range(len(self.q_values)) if self.q_values[i] == maxQ])
                    action = self.valid_actions[maxQ_index]
                else:
                    action = self.valid_actions[self.q_values.index(maxQ)]

        return action


    def learn(self, state, action, reward):
        """ The learn function is called after the agent completes an action and
            receives an award. This function does not consider future rewards
            when conducting learning. """

        ###########
        ## TO DO ##
        ###########
        # When learning, implement the value iteration update rule
        #   Use only the learning rate 'alpha' (do not use the discount factor 'gamma')
        """ Note to James: Remember that not considering future rewards is the
            same thing as setting gamma = 0.
            The value iteration formula for Q-Learning is as follows:
            Q(s,a) += alpha * (r + gamma * max,Q(s') - Q(s,a))
            Q(s,a) => self.q [state][action]
            gamma = 0.0 since we don't consider future rewards"""
        if self.learning == True:
            self.Q[state][action] += self.alpha * (reward - self.Q[state][action])

        return


    def update(self):
        """ The update function is called when a time step is completed in the
            environment for a given trial. This function will build the agent
            state, choose an action, receive a reward, and learn if enabled. """

        state = self.build_state()          # Get current state
        self.createQ(state)                 # Create 'state' in Q-table
        action = self.choose_action(state)  # Choose an action
        reward = self.env.act(self, action) # Receive a reward
        self.learn(state, action, reward)   # Q-learn

        return


def run():
    """ Driving function for running the simulation.
        Press ESC to close the simulation, or [SPACE] to pause the simulation. """

    ##############
    # Create the environment
    # Flags:
    #   verbose     - set to True to display additional output from the simulation
    #   num_dummies - discrete number of dummy agents in the environment, default is 100
    #   grid_size   - discrete number of intersections (columns, rows), default is (8, 6)
    env = Environment(verbose = True)

    ##############
    # Create the driving agent
    # Flags:
    #   learning   - set to True to force the driving agent to use Q-learning
    #    * epsilon - continuous value for the exploration factor, default is 1
    #    * alpha   - continuous value for the learning rate, default is 0.5
    """no learning case"""
    #agent = env.create_agent(LearningAgent)
    """non-optimized learning case"""
    #agent = env.create_agent(LearningAgent,learning= True, alpha = 0.99, epsilon = 0.90)
    """optimized learning case, no need to set epsilon in the optimized learning case since it's dependent on the 'a' constant (refer to formula)"""
    agent = env.create_agent(LearningAgent,learning= True, alpha = 0.1)

    ##############
    # Follow the driving agent
    # Flags:
    #   enforce_deadline - set to True to enforce a deadline metric
    env.set_primary_agent(agent, enforce_deadline = True)

    ##############
    # Create the simulation
    # Flags:
    #   update_delay - continuous time (in seconds) between actions, default is 2.0 seconds
    #   display      - set to False to disable the GUI if PyGame is enabled
    #   log_metrics  - set to True to log trial and simulation results to /logs
    #   optimized    - set to True to change the default log file name
    """non-learning & non-optimized learning case"""
    #sim = Simulator(env, update_delay = 0.01, log_metrics = True)
    """optimized learning case"""
    sim = Simulator(env, update_delay = 0.01, log_metrics = True, optimized = True)

    ##############
    # Run the simulator
    # Flags:
    #   tolerance  - epsilon tolerance before beginning testing, default is 0.05
    #   n_test     - discrete number of testing trials to perform, default is 0
    """no learning & non-optimized learning case """
    #sim.run(n_test = 10)
    """optimized learning case"""
    sim.run(n_test = 10, tolerance = 0.01)


if __name__ == '__main__':
    run()
